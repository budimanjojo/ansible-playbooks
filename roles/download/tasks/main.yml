---
- block:
  - name: Get defined list of directories needed
    set_fact:
      list_of_dirs: "{{ (list_of_dirs|default ([]) + [ item.dest_file|dirname ])|unique }}"
    loop: "{{ download_geturl_options }}"
    loop_control:
      label: "{{ item.dest_file }}"
    when: item is defined

  - name: Ensure directories needed are present
    file:
      name: "{{ item }}"
      state: directory
    loop: "{{ list_of_dirs }}"
    when: list_of_dirs is defined

  - name: Download files
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest_file }}"
      mode: "{{ item.mode | default(omit) }}"
      owner: "{{ item.owner | default(omit) }}"
      group: "{{ item.group | default(omit) }}"
      force: "{{ item.force | default('no') | bool }}"
      checksum: "{{ item.checksum | default(omit) }}"
      backup: "{{ item.backup | default('no') | bool }}"
      url_username: "{{ item.url_username | default(omit) }}"
      url_password: "{{ item.url_password | default(omit) }}"
    loop: "{{ download_geturl_options }}"
    loop_control:
      label: "{{ item.url }} => {{ item.dest_file }}"
    when: item is defined

- block:
  - name: Get defined list of directories needed
    set_fact:
      list_of_archive_dirs: "{{ (list_of_archive_dirs|default ([]) + [ item.dest_folder ])|unique }}"
    loop: "{{ download_geturl_archive_options }}"
    loop_control:
      label: "{{ item.dest_folder }}"
  - name: Ensure directories needed are present
    file:
      name: "{{ item }}"
      state: directory
    loop: "{{ list_of_archive_dirs }}"
    when: list_of_archive_dirs is defined
  - name: Ensure unzip and gtar is installed
    package:
      name: "{{ download_archive_packages }}"
      state: present
  - name: Create temporary dir
    file:
      path: /tmp/ansible_download_tmp
      state: directory
  - name: Download temporary files
    get_url:
      url: "{{ item.url }}"
      dest: "/tmp/ansible_download_tmp/{{ item.url | basename }}"
      force: "{{ item.force | default('no') | bool }}"
      checksum: "{{ item.checksum | default(omit) }}"
      backup: "{{ item.backup | default('no') | bool }}"
      url_username: "{{ item.url_username | default(omit) }}"
      url_password: "{{ item.url_password | default(omit) }}"
    loop: "{{ download_geturl_archive_options }}"
    loop_control:
      label: "{{ item.url }} => /tmp/ansible_download_tmp/{{ item.url | basename }}"
  - name: Unpack archives
    unarchive:
      src: "/tmp/ansible_download_tmp/{{ item.url | basename }}"
      dest: "{{ item.dest_folder }}"
      mode: "{{ item.mode | default(omit) }}"
      owner: "{{ item.owner | default(omit) }}"
      group: "{{ item.group | default(omit) }}"
      remote_src: yes
    loop: "{{ download_geturl_archive_options }}"
    loop_control:
      label: "/tmp/ansible_download_tmp/{{ item.url | basename }} => {{ item.dest_folder }}"
  when: download_geturl_archive_options is defined
